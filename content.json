{"posts":[{"title":"mmap and sigbus(上)","text":"同樣的code，在不同案子就是會有不同的驚喜(心累)。這次是syslog-ng會很隨機的crash。 12Program terminated with signal SIGBUS, Bus error. #0 0x0000007f89a378a4 in ?? () from /lib/ld-musl-aarch64.so.1 再找到ld-musl-aarch64.so.1映射的範圍 1234(gdb) info proc mappings 0x7f899de000 0x7f89a4e000 0x70000 0x0 /lib/libc.so0x7f89a378a4 - 0x7f899de000 = 0x598a4 知道crash的位置在libc.so offset 0x598a4。 objdump libc.so 120000000000059814 &lt;do_tzset&gt;: 598a4: 39400000 ldrb w0, [x0] 出示的指令是ldrb，用來讀取記憶體並放入register。 重新編譯一個帶debug symbol的版本，offset有跑掉，只能找一個大概的位置 12345678910111213141516171819202122 s = tzfile = (void *)__map_file(&quot;/etc/TZ&quot;, &amp;tzfile_size); 5b158: 91192281 add x1, x20, #0x648 5b15c: d00000a0 adrp x0, 71000 &lt;reserved.5595+0x6d0&gt; 5b160: 910f2c00 add x0, x0, #0x3cb 5b164: 97fffe34 bl 5aa34 &lt;__map_file&gt; 5b168: f9033660 str x0, [x19,#1640] 5b16c: f90037a0 str x0, [x29,#104] } if (!s) s = &quot;/etc/localtime&quot;; 5b170: f94037a0 ldr x0, [x29,#104] 5b174: b5000080 cbnz x0, 5b184 &lt;do_tzset+0x94&gt; 5b178: d00000a0 adrp x0, 71000 &lt;reserved.5595+0x6d0&gt; 5b17c: 910f4c00 add x0, x0, #0x3d3 5b180: f90037a0 str x0, [x29,#104] if (!*s) s = __gmt; 5b184: f94037a0 ldr x0, [x29,#104] 5b188: 39400000 ldrb w0, [x0] 5b18c: 35000080 cbnz w0, 5b19c &lt;do_tzset+0xac&gt; 5b190: b00000a0 adrp x0, 70000 &lt;protos+0xa0&gt; 5b194: 9122e000 add x0, x0, #0x8b8 5b198: f90037a0 str x0, [x29,#104] 這幾行code中跟ldrb有關的就是dereference，而 s 指向file backed memory。 搜尋一下還有誰會去存取/etc/TZ，結果發現有另一個程序會使用fprintf去寫入該檔案。寫一個測試檔案跑跑看 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#define SHARE_FILE &quot;./test&quot; static char* get_rand_str() { const int max = 100; const int min = 1; int len = rand() % max + min; char* ret = calloc(1, len); getrandom(ret, len, 0); return ret; } static void write_f(void) { FILE *fp = fopen(SHARE_FILE, &quot;w&quot;); char* rand_str = get_rand_str(); fprintf(fp, &quot;%s\\n&quot;, rand_str); fclose(fp); free(rand_str); } static void read_f(void) { int fd = open(SHARE_FILE, O_RDONLY | O_NONBLOCK); struct stat statbuf; int err = fstat(fd, &amp;statbuf); printf(&quot;stat size: %ld\\n&quot;, statbuf.st_size); char *ptr = mmap(NULL, statbuf.st_size, PROT_READ, MAP_SHARED, fd, 0); close(fd); if (*ptr) printf(&quot;.&quot;); munmap(ptr, statbuf.st_size); } static void* mmap_runner() { int i = 0; while(i &lt; 100) { read_f(); ++i; usleep(500); } pthread_exit(NULL); } static void* fio_runner() { int i = 0; while(i &lt; 100) { write_f(); ++i; usleep(500); } pthread_exit(NULL); } int main() { pthread_t mmap_thd; pthread_t fio_thd; pthread_create(&amp;mmap_thd, NULL, &amp;mmap_runner, NULL); pthread_create(&amp;fio_thd, NULL, &amp;fio_runner, NULL); pthread_join(mmap_thd, NULL); pthread_join(fio_thd, NULL); return 0; } 兩個thread，一個thread使用fopen/fprintf去寫檔，一個使用mmap讀檔，跑個幾次後就能觸發sigbus 1234Thread 2 &quot;a.out&quot; received signal SIGBUS, Bus error. [Switching to Thread 0x7ffff77c4700 (LWP 22134)] 0x0000555555554d94 in read_f () at test_mmap.c:68 68 if (*ptr) 與專案一樣掛在dereference地方。","link":"/2024/02/09/mmap%20and%20sigbus_1/"},{"title":"mmap and sigbus(下)","text":"在上一篇追蹤引發sigbus的程式碼片段，這篇來寫寫如何解決 回顧一下musl出問題的片段 123456789101112s = getenv(&quot;TZ&quot;);/* if TZ is empty try to read it from /etc/TZ */if (!s || !*s) { if (tzfile) __munmap((void*)tzfile, tzfile_size); s = tzfile = (void *)__map_file(&quot;/etc/TZ&quot;, &amp;tzfile_size);}if (!s) s = &quot;/etc/localtime&quot;;if (!*s) s = __gmt; 因此如果從環境變數 TZ 能取得值，則不會將 /etc/TZ map 進 memory，因此在帶起程式之前先給予TZ值 1TZ=&quot;GMT&quot; program 或者在c code裡使用setenv設定環境變數 1setenv(&quot;TZ&quot;, &quot;GMT&quot;, 1); 都能避免產生race condition。此外沒有給予環境變數時觀察/proc/self/maps可以發現TZ的存在 12$ cat /proc/152/maps7f881d9000-7f881da000 r--s 00000000 00:0f 6623 /etc/TZ 指定TZ就不會看到他出現了，解決。 番外在網上搜尋時發現，這個使用mmap讀取/etc/TZ的code並不是原生MUSL的作法，而是OpenWrt自己的Patch /toolchain/musl/patches/110-read_timezone_from_fs.patch 且該Patch從9年前就存在，出現在各版本的OpenWrt內，也有人提出可能導致sigbus的警告 https://github.com/openwrt/openwrt/issues/8758","link":"/2024/02/17/mmap%20and%20sigbus_2/"}],"tags":[{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"c","slug":"c","link":"/tags/c/"},{"name":"debug","slug":"debug","link":"/tags/debug/"},{"name":"openwrt","slug":"openwrt","link":"/tags/openwrt/"}],"categories":[],"pages":[]}